package ru.cpsmi.spring.service.impl;import com.fasterxml.jackson.databind.JsonNode;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.ObjectReader;import com.fasterxml.jackson.databind.node.ArrayNode;import org.springframework.beans.factory.annotation.Value;import org.springframework.http.*;import org.springframework.stereotype.Service;import org.springframework.web.client.RestTemplate;import ru.cpsmi.spring.model.Person;import ru.cpsmi.spring.model.PersonPageTO;import ru.cpsmi.spring.model.SimplePerson;import ru.cpsmi.spring.service.StarWarsPersonService;import ru.cpsmi.spring.util.RestClient;import java.io.IOException;import java.util.Arrays;import java.util.HashMap;import java.util.Map;import java.util.regex.Matcher;import java.util.regex.Pattern;import static org.springframework.util.StringUtils.isEmpty;@Servicepublic class StarWarsPersonServiceImpl implements StarWarsPersonService {    private static final Pattern ID_PATTERN = Pattern.compile("\\/([0-9]+)\\/$");    @Value("${app.swapi.url}")    private String url;    @Override    public Person getPerson(String id) {        return getPersonWithRestClient(id);    }    @Override    public PersonPageTO getPage(String pageNumber) {        PersonPageTO page = new PersonPageTO();        page.setNumber(pageNumber);        RestClient client = new RestClient(url);        Map<String, String> params = new HashMap<>();        params.put("page", pageNumber);        JsonNode node = client.get("people/", params);        page.setTotalPersons(node.get("count").asInt());        ArrayNode results = (ArrayNode) node.get("results");        for(JsonNode result : results) {            SimplePerson sPerson = new SimplePerson();            if(result.has("name")) {                sPerson.setName(result.get("name").asText());            }            // единственное поле, где есть id            if(result.has("url")) {                String url = result.get("url").asText();                Matcher idMatcher = ID_PATTERN.matcher(url);                if(idMatcher.find()) {                    //idMatcher.group(0) - Вся строка целиком                    sPerson.setId(idMatcher.group(1));                }            }            if(!isEmpty(sPerson.getId()) && !isEmpty(sPerson.getName())) {                page.addPerson(sPerson);            }        }        return page;    }    private Person getPersonWithRestTemplate(String id) {        RestTemplate restTemplate = new RestTemplate();        HttpHeaders headers = new HttpHeaders();        headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));        headers.add("user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36");        HttpEntity<String> entity = new HttpEntity<>("parameters", headers);        ResponseEntity<Person> personRE = restTemplate.exchange(url+ "people/" + id, HttpMethod.GET, entity ,Person.class);        Person person = personRE.getBody();        person.setId(id);        return person;    }    private Person getPersonWithRestClient(String id) {        RestClient client = new RestClient(url);        JsonNode node = client.get("people/" + id);        ObjectReader reader = new ObjectMapper().readerFor(Person.class);        try {            Person person = reader.readValue(node);            person.setId(id);            return person;        } catch (IOException e) {            e.printStackTrace();            return null;        }    }}