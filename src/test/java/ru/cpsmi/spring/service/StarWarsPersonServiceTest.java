package ru.cpsmi.spring.service;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import org.springframework.util.Assert;import ru.cpsmi.spring.model.Person;import ru.cpsmi.spring.model.PersonPageTO;import static org.springframework.util.StringUtils.isEmpty;@RunWith(SpringRunner.class)@SpringBootTestpublic class StarWarsPersonServiceTest {    @Autowired    private StarWarsPersonService starWarsPersonService;    @Test    public void testGetPerson() {        String id = "5";        Person person = starWarsPersonService.getPerson(id);        validatePerson(person);    }    @Test    public void testGetPage() {        String pageNumber = "2";        PersonPageTO page = starWarsPersonService.getPage(pageNumber);        Assert.notNull(page, "PersonPageTO не должно быть null");        Assert.notEmpty(page.getPages(), "Pages не должны быть пустыми");        Assert.notEmpty(page.getPersons(), "Persons не должны быть пустыми");        Assert.isTrue(page.getTotalPersons() > 0, "totalPersons должен быть больше нуля");    }    private void validatePerson(Person person) {        Assert.notNull(person, "");        Assert.isTrue(!isEmpty(person.getId()), "Id не должен быть пустым");        Assert.isTrue(!isEmpty(person.getName()), "Name не должен быть пустым");        Assert.isTrue(!isEmpty(person.getWeight()), "Weight не должен быть пустым");        Assert.isTrue(!isEmpty(person.getHeight()), "Height не должен быть пустым");        Assert.isTrue(!isEmpty(person.getGender()), "Gender не должен быть пустым");    }}