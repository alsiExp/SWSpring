package ru.cpsmi.spring.util;import com.fasterxml.jackson.databind.JsonNode;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.node.ObjectNode;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.StatusLine;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.*;import org.apache.http.client.utils.URIBuilder;import org.apache.http.entity.ContentType;import org.apache.http.entity.StringEntity;import org.apache.http.entity.mime.MultipartEntityBuilder;import org.apache.http.impl.client.HttpClients;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.net.URI;import java.net.URISyntaxException;import java.nio.charset.Charset;import java.util.Map;public class RestClient {    private final HttpClient httpClient;    private final URI baseUri;    public URI getBaseUri() {        return baseUri;    }    public RestClient(String baseUrl) {        this.httpClient = HttpClients.createDefault();        this.baseUri = URI.create(baseUrl);    }    public RestClient(HttpClient httpClient, String baseUrl) {        this.httpClient = httpClient;        this.baseUri = URI.create(baseUrl);    }    private URI buildUri(String path, Map<String, String> params) throws URISyntaxException {        URIBuilder ub = new URIBuilder(baseUri);        ub.setPath(ub.getPath() + path);        if (params != null) {            for (Map.Entry<String, String> entry : params.entrySet())                ub.addParameter(entry.getKey(), entry.getValue());        }        return ub.build();    }    private URI buildUri(String path) throws URISyntaxException {        return buildUri(path, null);    }    private JsonNode request(HttpRequestBase req) throws IOException {        ObjectMapper mapper = new ObjectMapper();        req.addHeader("Accept", "application/json");        HttpResponse resp = httpClient.execute(req);        StatusLine sl = resp.getStatusLine();        if (sl.getStatusCode() >= 300) {            throw new RestException("Bad request " + req.getURI().toString() + " answer status code=" + sl.getStatusCode());        }        HttpEntity ent = resp.getEntity();        if (ent != null) {            ByteArrayOutputStream baos = new ByteArrayOutputStream();            ent.writeTo(baos);            if (baos.size() > 0) {                JsonNode node = mapper.readTree(baos.toByteArray());                baos.close();                return node;            } else {                baos.close();                ObjectNode node = new ObjectMapper().createObjectNode();                node.put("statusCode", sl.getStatusCode());                return node;            }        } else {            ObjectNode node = new ObjectMapper().createObjectNode();            node.put("statusCode", sl.getStatusCode());            return node;        }    }    private JsonNode request(HttpEntityEnclosingRequestBase req, ObjectNode body) throws IOException {        return request(req, body != null ? body.toString() : null);    }    private JsonNode request(HttpEntityEnclosingRequestBase req, String body) throws IOException {        if (body != null) {            StringEntity ent = null;            ent = new StringEntity(body, ContentType.APPLICATION_JSON);            req.addHeader("Content-Type", "application/json");            req.setEntity(ent);        }        return request(req);    }    private JsonNode request(HttpEntityEnclosingRequestBase req, Map<String, String> formData) throws IOException {        if (formData != null) {            HttpEntity entity = null;            MultipartEntityBuilder builder = MultipartEntityBuilder.create();            builder.setCharset(Charset.forName("UTF-8"));            for (Map.Entry<String, String> entry : formData.entrySet()) {                builder.addTextBody(entry.getKey(), entry.getValue(), ContentType.APPLICATION_JSON);            }            entity = builder.build();            req.setEntity(entity);        }        return request(req);    }    public JsonNode post(String path, Map<String, String> map) {        try {            return request(new HttpPost(buildUri(path)), map);        } catch (IOException | URISyntaxException e) {            throw new RestException(e.getMessage());        }    }    public JsonNode post(URI uri, String body) {        String quoted = null;        if (body != null && !body.isEmpty()) {            quoted = String.format("\"%s\"", body);        }        try {            return request(new HttpPost(uri), quoted);        } catch (IOException e) {            throw new RestException(e.getMessage());        }    }    public JsonNode post(URI uri, ObjectNode json) {        try {            return request(new HttpPost(uri), json);        } catch (IOException e) {            throw new RestException(e.getMessage());        }    }    public JsonNode post(String path, ObjectNode json) {        try {            return post(buildUri(path), json);        } catch (URISyntaxException e) {            throw new RestException(e.getMessage());        }    }    public JsonNode post(String path, String body) {        try {            return post(buildUri(path), body);        } catch (URISyntaxException e) {            throw new RestException(e.getMessage());        }    }    public JsonNode post(String path) {        return post(path, "");    }    public JsonNode get(URI uri) {        try {            return request(new HttpGet(uri));        } catch (IOException e) {            throw new RestException(e.getMessage());        }    }    public JsonNode get(String path, Map<String, String> params) {        try {            return get(buildUri(path, params));        } catch (URISyntaxException e) {            throw new RestException(e.getMessage());        }    }    public JsonNode get(String path) {        return get(path, null);    }}